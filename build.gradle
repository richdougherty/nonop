plugins {
    id 'java-library'
}

group = "nz.rd.nonop"
version = "0.1.0-SNAPSHOT"

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Byte Buddy for bytecode manipulation
    implementation 'net.bytebuddy:byte-buddy:1.17.5'          // Check for latest version
    implementation 'net.bytebuddy:byte-buddy-agent:1.17.5'    // For dynamic attachment if needed, and for ClassFileTransformer

    // Logging
    // implementation 'org.slf4j:slf4j-api:1.7.36'
    // runtimeOnly 'org.slf4j:slf4j-simple:1.7.36'

    // Testing
    testImplementation(platform('org.junit:junit-bom:5.13.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testRuntimeOnly('org.junit.platform:junit-platform-launcher')
    // testImplementation 'org.junit.jupiter:junit-jupiter'
//     testImplementation 'org.junit.jupiter:junit-jupiter-api:5.13.0'
//     testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.13.0'
    // testImplementation 'org.mockito:mockito-core:5.12.0'
    // testImplementation 'org.mockito:mockito-junit-jupiter:5.12.0'
    testImplementation 'org.hamcrest:hamcrest:3.0'
    // Testing - utils
    testImplementation 'com.google.guava:guava:33.4.8-jre'
    implementation 'org.apache.commons:commons-lang3:3.17.0'

    // For JMH later
    // testImplementation 'org.openjdk.jmh:jmh-core:1.37'
    // testAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
}

// Fat JAR for distributing agent
// TODO: Shadow our dependencies
jar {
    archiveBaseName = project.name
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Premain-Class': 'nz.rd.nonop.NonopAgent',
                // 'Agent-Class': 'nz.rd.nonop.NonOpAgent', // TODO: consider supporting attach-on-the-fly later
                'Can-Retransform-Classes': 'true',
                'Can-Redefine-Classes': 'false' // Declare not needed explicitly
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        // Exclude signature files from dependencies, which can cause issues
        // when creating a fat JAR.
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
        // Exclude due to duplicates in byte-buddy and byte-buddy-agent
        // TODO: Work out how to merge these between apps
        exclude "META-INF/versions/9/module-info.class"
        // Exclude license/notice files from dependencies to avoid bloat/conflicts
        // if you are not redistributing them in a way that requires this.
        // Review your obligations for each dependency.
        exclude "META-INF/LICENSE*"
        exclude "META-INF/NOTICE*"
        exclude "LICENSE*" // TODO: Include licenses
    }
    // Be safe; can update if this causes an issue
    duplicatesStrategy = DuplicatesStrategy.FAIL
}

tasks.test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Define a custom task to run your integration test sample app
tasks.register('runTestApp', JavaExec) {
    description = "Runs SampleApp with the agent attached."

    mainClass = 'nz.rd.nonoptest.integration.SampleApp'

    // Use the test runtime classpath, which includes compiled test classes
    // and all dependencies declared with testImplementation or testRuntimeOnly
    classpath = sourceSets.test.runtimeClasspath

    // Set the JVM arguments, including the javaagent argument
    // We depend on the 'jar' task to ensure the agent JAR is built before we try to run it
    dependsOn jar
    jvmArgs = ["-javaagent:${jar.archiveFile.get().asFile.absolutePath}"]
}